'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportPathMap = exports.webpack = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _load = require('./entries/load');

var _load2 = _interopRequireDefault(_load);

var _uglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin');

var _uglifyjsWebpackPlugin2 = _interopRequireDefault(_uglifyjsWebpackPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = function (original) {
  var oWebpack = original.webpack,
      oExportPathMap = original.exportPathMap;


  return _extends({}, original, {
    webpack: function webpack() {
      var our = _webpack.apply(undefined, arguments);
      var their = void 0;

      if (oWebpack) {
        their = oWebpack.apply(undefined, arguments);
      }

      return _extends({}, our, their);
    },
    exportPathMap: async function exportPathMap() {
      var our = await _exportPathMap();
      var their = void 0;
      if (oExportPathMap) {
        their = await oExportPathMap();
      }

      return _extends({}, our, their);
    }
  });
};

var _webpack = function _webpack(config, _ref) {
  var dev = _ref.dev;

  config.node = {
    fs: 'empty'
  };

  config.plugins = config.plugins.filter(function (plugin) {
    return plugin.constructor.name !== 'UglifyJsPlugin';
  });

  if (!dev) {
    config.plugins.push(new _uglifyjsWebpackPlugin2.default({
      parallel: true,
      sourceMap: true
    }));
  }

  return config;
};

exports.webpack = _webpack;
var _exportPathMap = async function _exportPathMap() {
  var entries = await (0, _load2.default)();
  var map = entries.reduce(function (prev, _ref2) {
    var data = _ref2.data;
    var url = data.url,
        page = data.page,
        _entry = data._entry;

    var query = _entry ? { _entry: _entry } : undefined;
    return page ? _extends({}, prev, _defineProperty({}, url, { page: '/' + page, query: query })) : prev;
  }, {});

  return _extends({
    '/': { page: '/' }
  }, map);
};
exports.exportPathMap = _exportPathMap;