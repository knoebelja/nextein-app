#!/usr/bin/env node
'use strict';

var _path = require('path');

var _crossSpawn = require('cross-spawn');

var _fs = require('fs');

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_package2.default.peerDependencies) {
  Object.keys(_package2.default.peerDependencies).forEach(function (dependency) {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency);
    } catch (err) {
      console.warn(dependency + ' not found. Please install ' + dependency + ' using \'npm install ' + dependency + '\'');
    }
  });
}

var defaultCommand = 'dev';
var commands = new Set([
// 'init',
'build', 'export', defaultCommand]);

var cmd = process.argv[2];
var args = void 0;

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(_package2.default.name + ' v' + _package2.default.version);
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log('\n    Usage\n      $ nextein <command>\n\n    Available commands\n      ' + Array.from(commands).join(', ') + '\n\n    For more information run a command with the --help flag\n      $ nextein dev --help\n  ');
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

var bin = void 0;
if (cmd === defaultCommand) {
  bin = (0, _path.join)(__dirname, 'nextein-' + cmd);
} else {
  bin = 'next';
  args.unshift(cmd);
}

var startProcess = function startProcess() {
  var proc = (0, _crossSpawn.spawn)(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });
  proc.on('close', function (code, signal) {
    if (code !== null) {
      process.exit(code);
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }
      console.log('got signal ' + signal + ', exiting');
      process.exit(1);
    }
    process.exit(0);
  });
  proc.on('error', function (err) {
    console.error(err);
    process.exit(1);
  });
  return proc;
};

var restartProcess = function restartProcess(cur, prev) {
  if (cur.size > 0 || prev.size > 0) {
    console.log('\n> Found a change in next.config.js, restarting the server...');
    // Don't listen to 'close' now since otherwise parent gets killed by listener
    proc.removeAllListeners('close');
    proc.kill();
    proc = startProcess();
  }
};

var proc = startProcess();
// const { pagesDirectory = resolve(process.cwd(), 'pages') } = getConfig(process.cwd())
var pagesDirectory = (0, _path.resolve)(process.cwd(), 'pages');

if (cmd === 'dev') {
  (0, _fs.watchFile)((0, _path.resolve)(pagesDirectory, '..') + '/next.config.js', restartProcess);
}