'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.byFileName = undefined;

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _unfetch = require('unfetch');

var _unfetch2 = _interopRequireDefault(_unfetch);

var _env = require('./env');

var _process = require('./process');

var _process2 = _interopRequireDefault(_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function () {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'posts';

  return (0, _env.isServer)() ? fromServer(path) : fromClient(path);
}; /* global __NEXT_DATA__ */


var fromServer = async function fromServer(entriesPath) {
  var paths = _glob2.default.sync(entriesPath + '/**/*.md', { root: process.cwd() });

  return (0, _process2.default)(paths, entriesPath).filter(function (_ref) {
    var data = _ref.data;
    return data.published !== false;
  });
};

var fromClient = async function fromClient(path) {
  // in safari the popstate event is fired when user press back and
  // causes the getInitialProps to be called in the SSR version
  // This will pickup the current props and return it as a workaround
  // https://github.com/zeit/next.js/issues/2360
  if (__NEXT_DATA__.nextExport) {
    return __NEXT_DATA__.props.posts;
  }
  var resp = await (0, _unfetch2.default)('/_load_entries');
  return resp.json();
};

var byFileName = exports.byFileName = async function byFileName(path) {
  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'posts';

  return (0, _env.isServer)() ? byFileNameFromServer(path, root) : byFileNameFromClient(path);
};

var byFileNameFromServer = function byFileNameFromServer(path, entriesPath) {
  return (0, _process2.default)([path], entriesPath).pop();
};

var byFileNameFromClient = async function byFileNameFromClient(path) {
  // this is used to make next.js Link to work on exported sites.
  if (__NEXT_DATA__.nextExport) {
    return findPostFromNextCache(path);
  }
  var resp = await (0, _unfetch2.default)('/_load_entry/' + path.replace(_path.sep, '/'));
  return resp.json();
};

var findPostFromNextCache = function findPostFromNextCache(path) {
  var _NEXT_DATA__$props = __NEXT_DATA__.props,
      post = _NEXT_DATA__$props.post,
      posts = _NEXT_DATA__$props.posts;


  return post && post.data._entry === path ? post : posts.filter(function (p) {
    return p.data._entry === path;
  }).reduce(function (v) {
    return v;
  });
};